// This file contains a template for the implementation of Robo prediction
// algorithm

#include "PredictionAlgorithm.hpp"
#include <iostream>
#include <cmath>
#include <unordered_map>

#include <vector>

struct RoboPredictor::RoboMemory {
  // Place your RoboMemory content here
  // Note that the size of this data structure can't exceed 64KiB!
    double window[10] = {0.395100,0.395100,0.395100,0.395100,0.395100,0.395100,0.395100,0.395100,0.395100,0.395100,};

  double cluster_means[1024]={0.039455168366963056,0.6608918293027566,0.21224199879984798,0.9165565136127221,0.4182356772703558,0.17172085932468875,0.550197860441038,0.7811616944337625,0.27346716713693353,0.06505105777938053,0.34610653607798897,0.11632464687318073,0.9867361448759417,0.019828186268427805,0.47619657024659695,0.23812638701516067,0.8486790892995624,0.19102194712473874,0.7337274720221263,0.6100013387818151,0.05176928205770698,0.15931809928667032,1.1102230246251565e-16,0.3147371398258473,0.08469687663560743,0.38235474707849393,0.2012003559088662,0.5215518287689571,0.6976929344880936,0.8841802603829589,0.1473083560425158,0.9642229399812687,0.8158812519809304,0.22118982659800016,0.5819591600669834,0.44687065490202954,0.6317039575683394,0.2551618131459628,0.030398866757855608,0.7490518786567555,0.29580418710257184,0.1818184472566108,0.49659977390731386,0.04594697290734284,0.9433299688625412,0.05743805115561318,0.7987005890622301,0.07349370367265093,0.13626535469527068,0.23295290805821847,0.7141816856887335,0.0988557210302576,0.4030303503462655,0.679541811877691,0.3730020361988451,0.20508655272379994,0.32566901335195764,0.19593037587375692,0.7715492609535888,0.8386145613725964,1.0000000000000002,0.24528422055511828,0.22689475223947334,0.8654619233565477,0.5627590644746264,0.035476328418037884,0.9000829875518672,0.16666303471420166,0.5362405699841978,0.6462833670880106,0.12499326375435922,0.01049986055298488,0.42937213893117765,0.18715159500241574,0.28241279288469323,0.36221115173222385,0.02547466227355366,0.1785445477547157,0.5972628577208221,0.26324171634458504,0.506138076987074,0.09091795403582478,0.3345360432020974,0.21654908909638113,0.06156445906336461,0.15310004452817608,0.053799076059806133,0.07033704214532685,0.9260025053639551,0.20740750738896727,0.11114507568889166,0.45455015517030767,0.042993934298789754,0.9766082059508614,0.14188220551667902,0.7599695689694326,0.48693826721949207,0.5712728212808444,0.07858131223759773,0.6189929306355294,0.39381831539875833,0.24999506328863963,0.30620529474002955,0.048517304261075755,0.17508327395818568,0.8238725795586705,0.9499752236692653,0.4621235172857127,0.8751943977767205,0.7052036602604834,0.8090262749435135,0.4385257165292501,0.10533117537211104,0.6736684140199404,0.35295891813175334,0.6911536276554215,0.721371668336235,0.7909863316367209,0.9372576281892837,0.8581108640297379,0.015118147002324944,0.06733605367619142,0.23002957306721775,0.5919836194249896,0.1634155916174061,0.7424972197212543,0.6666774964295625,0.8928267762913955,0.1305764680654002,0.29993410248003893,0.5457133226311855,0.9113334336689294,0.2875736509042971,0.6041068801844476,0.19358205690119712,0.19749721161237865,0.639684285112859,0.03331639645668774,0.5148929121067032,0.24192116482771764,0.412630456280356,0.6534291669521406,0.20937826958925979,0.9953573758076513,0.4703190052288857,0.22223824760049302,0.18525808136911762,0.5286979281944435,0.19934213477790422,0.9556871124032482,0.055217291558927906,0.27771072359707694,0.31867465103776954,0.0367109509896591,0.059141534709922644,0.09454572647287257,0.04167160694446634,0.20334128026193624,0.26947472882609785,0.7293281584033915,0.8334623132089258,0.21863801149693124,0.7642429066022416,0.027735611753795963,0.12055572567587114,0.022292033951537032,0.049715516231619294,0.3400577221797578,0.62279104664921,0.08172099019418033,0.21427776472081958,0.22398716674720498,0.1558431860582731,0.5014994932712448,0.15072873479601084,0.9314617425571836,0.1690091387596042,0.5576310100439328,0.8803299004015277,0.6862000566383011,0.1892437697161158,0.8282815599485414,0.3682343357163243,0.18395435797405674,0.42146975107424034,0.9050982432381829,0.08825982745215334,0.2357759138202158,0.9715453542493133,0.17723292946704997,0.636503656905727,0.291689738016944,0.7860359182227652,0.7562332247797798,0.25863899455612527,0.006535028280954869,0.04733430902636945,0.9803304827814663,0.868835338238015,0.5773650784814373,0.0760483142227541,0.4821487590618903,0.13333333333333336,0.04479444936677318,0.7253787281048918,0.8538603095518165,0.5098114968161593,0.5411192737093767,0.9913498963131651,0.4332445811543023,0.17400890123563909,0.6153103894771712,0.42505339499576833,0.25300436029122747,0.9217728477788723,0.357039400261575,0.38025410523571174,0.13814297016066956,0.5881342374851648,0.06340105861806769,0.037906436875932564,0.38450170362418484,0.8021976867026823,0.3866248973954266,0.8896009387161787,0.14457166911852412,0.4506124960926963,0.5321484144566934,0.4429326668132402,0.4892834712103724,0.18021741818247208,0.8435209120464455,0.20626869800508518,0.060166911506366466,0.7375292477994053,0.39711435663536265,0.7763526313412579,0.19233377064395768,0.82129907941539,0.9607789914007898,0.390505174567206,0.7101347128067015,0.03163998408668145,0.21101000115843838,0.7530771278629627,0.04052588004518423,0.6248009329382724,0.24832335972794023,0.1613188325748065,0.7955289773352043,0.10719333386504502,0.7018117175725358,0.4060125519309073,0.5251186776103332,0.3111408350191769,0.3042061196735665,0.05073694433208745,0.1950042159807769,0.3293262097632045,0.012423860642794576,0.4,0.6431907359028266,0.9678868862126238,0.4580832394862477,0.22833927372925117,0.07144393963481857,0.24318094576395655,0.024114369152902576,0.26672927190193096,0.20239261933087185,0.6000956502951728,0.06931722873167637,0.2254744859953091,0.12772211231753733,0.016435563156140226,0.0565907076691739,0.6766469460401697,0.8139181508441946,0.10270528547299776,0.02943735757981139,0.7450640777937259,0.8607702326207078,0.23198245466215012,0.26085748038733836,0.5640194776605012,0.4926135055931914,0.15734663880934566,0.32255306082370866,0.034155720253452954,0.05267706700670158,0.9467612293144207,0.043805947730733596,0.16587208717762414,0.23995234534465712,0.657351915591817,0.6939709053703957,0.09677086494039701,0.2857779417358338,0.5679874926939508,0.553390616475723,0.8183250710346346,0.21811126140847387,0.34238510526934446,0.40851963435680294,0.21994383896548353,0.18818366150857574,0.3753783376364855,0.01804884173974014,0.5945053705975055,0.17298766561231266,0.1130034273536019,0.6835339554148284,0.4732708603835314,0.0661005094683847,0.9345612194769235,0.18315645321320567,0.4671605346242088,0.5,0.17645115131130312,0.7666653159302275,0.07745299360672318,0.6692928367837261,0.21320203253272224,0.27998923972538753,0.8874566843657006,0.08334016823903644,0.5752754071246715,0.062459610707540275,0.3488487896012459,0.5174983629905731,0.12229250333801102,0.11755222091387252,0.1703880757173575,0.6261477766630215,0.7188863497496876,0.19999772148592287,0.2760909005551207,0.05831489365144185,0.6491337583278645,0.9828345613979541,0.07220363281470768,0.08619500189685828,0.9080785239339504,0.8056554756195045,0.297542678451297,0.23388636282016875,0.8950390521543654,0.9895036524402263,0.9286769536256405,0.21520570128011995,0.6710211777598168,0.3333049379561007,0.07987203210130908,0.14950190576112035,0.2470297793339721,0.9411223574700323,0.8346635558132132,0.47922902745059087,0.20419178080293593,0.6064661487401604,0.6337123864512095,0.628397285774335,0.23767520038252574,0.36686483257460745,0.1900851967704042,0.18632744495250642,0.07458589392908685,0.8723486118256436,0.730748446693855,0.2084360322834534,0.9530228838102359,0.14286061327200691,0.1647197340515433,0.0027058203437451134,0.9242286934452966,0.547544865711328,0.2719113789880872,0.9133169273244051,0.15466364857177706,0.33727318989300853,0.026775737223565216,0.7748160003405087,0.2657352427152775,0.2101667302860594,0.0927636678704525,0.06867765904301062,0.6204146717716743,0.06454914912109455,0.5389397841385309,0.1983503160948793,0.48386277466982075,0.009297041879868712,0.14040413970292637,0.3161738604744246,0.17952201564686374,0.02079709887033801,0.14634550931648851,0.8774483363908996,0.16774224818261013,0.049302433881382446,0.30786393202220974,0.3587217511148577,0.0454050762961864,0.03820492485250132,0.6640436581579894,0.2940140313971932,0.769205387763618,0.8973179361033732,0.722767563834031,0.7790299820573332,0.04662681837870758,0.05453385969101876,0.7884781851503149,0.16207437389846094,0.2174792229132177,0.16061636641873195,0.41461952502807053,0.845776794253986,0.9626837046269183,0.19655050611192085,0.7828099851295067,0.3701853397164476,0.8506874215105475,0.04773533900646676,0.9011455953196601,0.23077978488350787,0.5849457682503125,0.28964679488228573,0.2016127058598457,0.4558765788035905,0.6585326125205233,0.9193638430304825,0.8404976467576581,0.1351482168609089,0.2516245501743728,0.23679663750038288,0.9782896742250884,0.19140826663947533,0.9594719232549538,0.5036855728640899,0.8116979007428284,0.038527998405233826,0.688290550409695,0.10000803793907244,0.8,0.11888179444354911,0.2228690346360385,0.04263655992232818,0.055880261471326714,0.02861469239751399,0.10864119033957753,0.5350284798932079,0.44150669096456185,0.18135068101084273,0.3642931703853281,0.43100117258440873,0.7618119028837804,0.31239584642117957,0.15802795044024875,0.8319443479871287,0.013732358032152447,0.03249630045594776,0.19410142988379314,0.06090539840005188,0.51214839399813,0.83623020392174,0.7516270112264798,0.1524767604199943,0.2624515061252658,0.8829004982041591,0.4527312489831457,0.6809888861649258,0.1315841403560702,0.6545668000866773,0.5086932899729455,0.7041793738816398,0.7353479512422889,0.3024091771413416,0.7075421458544804,0.5736238721103903,0.2570256004597785,0.7269026467212649,0.24071277581875702,0.6509341836631732,0.05111760340571844,0.5789903962694429,0.7000585480093677,0.6024481047225482,0.4269793394391701,0.8551556858356111,0.7169949009533336,0.3200048993835583,0.44434775818529787,0.9938775650488805,0.7399382326167805,0.2387019468645697,0.5903111233831149,0.023276058659551097,0.9744927278881423,0.36044787616670065,0.2113996277093688,0.04414058139579147,0.5604436786211855,0.24394181422500522,0.036297042752733155,0.10431466096946154,0.5559936746141534,0.3923774869448133,0.04095149730910505,0.5306190625434932,0.7931715317040275,0.026192940131004455,0.1927517937939534,0.3095740090865032,0.9973728186463906,0.1826535786051318,0.6109192460597592,0.5441676066496597,0.46311424770009635,0.27447343482377934,0.3504965004869387,0.03480095577413739,0.23437773357000047,0.8621289182593119,0.9333838599967494,0.4104231219906148,0.2260833084008966,0.12891343050958892,0.06669291254399048,0.6124258396861344,0.6168628649833435,0.3309583680293077,0.08117059870074013,0.9487521925896569,0.1140839011052493,0.23138972229702964,0.5228167494984528,0.6377518875604393,0.2277345050499854,0.9146612537843444,0.19549140707321838,0.27903680238307316,0.7473096514741555,0.7576460327989696,0.17810756660392568,0.08683200950186025,0.24641509271329712,0.12313854337022062,0.3449896609097125,0.0040360374919198305,0.13951730361578812,0.3784846134080893,0.09003654184123586,0.8570506988520845,0.15666840523955705,0.2707329194798868,0.04006182210856418,0.18476704023233012,0.25360855568144713,0.9382097007360757,0.2068002864599408,0.16410474666630379,0.4938572887145862,0.47156974378684163,0.9696718576455017,0.43533452807646356,0.42301834932696414,0.6927003219367167,0.4649211917994544,0.04199033743575084,0.711757755665616,0.6726193885282911,0.17111168581003278,0.1514161172254958,0.4165200007073542,0.2156181105895694,0.3891638971962379,0.5833655534576251,0.6078369804162869,0.05704283254850334,0.46819667917035723,0.22452477003615767,0.268032974595073,0.4194690002108583,0.22898807638572602,0.9300802826931993,0.0728439797902583,0.053058660657301304,0.9024097016613493,0.2640401651560186,0.49777263495968116,0.037158902645935715,0.85185871454201,0.09589090365211095,0.20791054418128635,0.1887162876455082,0.16980734058564567,0.7976970506431824,0.2137640988047351,0.17553399356812646,0.3235842581244156,0.5265227755593176,0.842011141094333,0.7439430071113156,0.04889782242564636,0.18581886100506534,0.20464233011836516,0.017253469156268464,0.34375189191640343,0.4911814559283245,0.765535710829621,0.18762664058511264,0.5521739452494236,0.77284354601368,0.05556212391452672,0.5698494737712387,0.05039791958999709,0.17265332001030823,0.005304361025076254,0.145475214204056,0.15385401203020982,0.3655512920083367,0.06784052499037191,0.4479412054643476,0.8639397377322391,0.5206832979898761,0.18057998076107803,0.20584374286275225,0.8296591956563242,0.05980655782138811,0.3474415360388031,0.9663654671046684,0.030859685296297956,0.2813414034497855,0.9568516441808264,0.20892981364978913,0.23484523517385225,0.8198813538433132,0.33892013696738255,0.04627064336240694,0.05878048145395798,0.43981830433869584,0.07499862911084088,0.784493611960581,0.07798573411228578,0.5665870784133078,0.1684390101795953,0.910357025521318,0.008046792040255268,0.2234812579848525,0.07091351271768268,0.24462639204018594,0.9514587150528366,0.07688590971396607,0.5989690292394023,0.22063143436188615,0.2834806467059344,0.37150806914571444,0.9091741638123698,0.043421531493656906,0.6654955564176906,0.09174168339117893,0.19703069264883555,0.019274996916803844,0.17347322185797187,0.8813672636938399,0.02496318073812348,0.21911238833287563,0.48489859851863787,0.6949843269459608,0.8262951136531964,0.03902355423196549,0.06398246362775209,0.32687440659840694,0.21176359136730527,0.05417441741592535,0.7777396214896215,0.8070271096159967,0.20285303596604104,0.10175792804682868,0.644887388747936,0.17456577971268608,0.8737161703349143,0.48823968590837646,0.31361885982703774,0.2601777470848782,0.15002688195799063,0.8227563230672748,0.06981245742117381,0.14797799413582685,0.08248081476809024,0.05785847634160182,0.37682007757348907,0.11542443336088154,0.06195771145297907,0.02123721298198894,0.787512163235607,0.18669637718202703,0.10935412296265051,0.9230638438126006,0.355256830830915,0.09798088552327928,0.20053154879554733,0.2170107698510095,0.6292113273245193,0.183546860233152,0.1261983074931795,0.14376822025450842,0.43419047932600013,0.4612769195451068,0.16003048234578895,0.7316226213423929,0.8673880333995732,0.0523557980509044,0.68224615071275,0.21271507597502182,0.3360404203713709,0.7199787347168387,0.10347177524746944,0.6355231040773466,0.20375445238846068,0.1988240896514926,0.3835066275840616,0.29853825428494585,0.13714637871078655,0.7704246729328061,0.5804964510745143,0.5866282257802846,0.4011669304427394,0.4593376928840861,0.6848226204564717,0.9816996677161356,0.10635956732984424,0.3210259530567704,0.4366863364819874,0.048153430318781526,0.4804970753401186,0.6052467967672002,0.5490514168912382,0.2424636432451664,0.5426140288708433,0.24776100414272356,0.9858882293685247,0.810653775472022,0.0629021836292486,0.25433599254740635,0.08901948790618995,0.16276838747872813,0.8911228549507193,0.4285391663440444,0.1822740106537291,0.8010581419275331,0.2106209492912404,0.9881038311067145,0.05492750613305972,0.6871752306782155,0.013085124494307682,0.5278781884025451,0.8985185013483632,0.035839550746182725,0.5330859950018829,0.8701399897944135,0.9932649190877028,0.2578493163000875,0.7410976511014815,0.8251213592233009,0.8170207121403796,0.5132614815274412,0.451794821808755,0.6410155796988974,0.47730416634580414,0.09525252525252524,0.12136989387183454,0.06834357232523383,0.03286787581045367,0.02987370314172172,0.07911802579795804,0.39510032838304543,0.3008947916628499,0.1809361688241043,0.19794435973359814,0.011649093438348135,0.9734492481203008,0.4568222866259796,0.6680359606132615,0.9207748270534872,0.6471227895839724,0.20200745668079653,0.04565997571600472,0.6553660593923758,0.1907408342307394,0.75,0.19455631494162332,0.06556429274967981,0.18968034978733844,0.4785185674639884,0.44568741476328205,0.5934322033898305,0.518807325347248,0.4741622579280251,0.2523376133378415,0.1343013054545106,0.28867866185999,0.29278471695381775,0.6134793938896087,0.053437507738614,0.9443433699332542,0.022781122641378382,0.2147223322484429,0.9177103794687811,0.24134507333785615,0.6965949186949714,0.34125206053036383,0.041353910595795684,0.08561669165996111,0.7944767254632483,0.7540074091549385,0.2217747147877593,0.6305919863377968,0.7964652330925446,0.7061633852962452,0.15516505471986525,0.05149278288179876,0.0321516499471676,0.09373943119064064,0.21955388823483682,0.17604131831102499,0.11985837594573331,0.760701244766919,0.6903999657416924,0.7090057475664207,0.25099735966490344,0.1653142100056721,0.715539486252353,0.8048878258277739,0.6274672528139976,0.5401619773949179,0.5340144005881413,0.789688266672828,0.03759824939783116,0.7235467638582611,0.2324691149922228,0.17928177493869188,0.6595845313086635,0.2727159647564356,0.1918630867421973,0.9040228706312452,0.6345893792202365,0.2562503166677653,0.6624358845418887,0.07401789768414802,0.20973162953874824,0.04507464994093424,0.027330344600895645,0.14885332844713137,0.24582214294559188,0.5074567241886437,0.4037941647175338,0.1671700637645325,0.22727761029234136,0.03374616504922612,0.26475031852577036,0.16937607580248148,0.03515338327001419,0.7629823799420297,0.06057725902824615,0.2905034880674553,0.22501925170614703,0.6144968118070848,0.018713883548969412,0.768190367561099,0.932592091618565,0.6989968523694624,0.4258725729658333,0.1777514408453745,0.39910650139548876,0.5651046301307835,0.8793163375932416,0.02171845140189696,0.641936901551984,0.15866473963669708,0.3518370131473041,0.12379239368017764,0.6773340098677814,0.19315111800440635,0.3538266157846346,0.23040306466679172,0.8373135490363492,0.9460163227153102,0.6523009089376673,0.6894892835395631,0.49571134740052786,0.5167955249483307,0.028986542770841228,0.402082328714231,0.06898195754215555,0.935502880134861,0.5111349618075983,0.03447019217910194,0.13243965679336878,0.1102493161009008,0.2619555202079474,0.9157447065743374,0.046975204918210306,0.8590232762722598,0.23633768987375803,0.3285053098979339,0.1389404041884818,0.9703483020788704,0.30519533391180276,0.19624409036569418,0.8887043859413237,0.2352811589897243,0.24904439728404393,0.1722736947772128,0.7032743761918634,0.21606473921671615,0.3244966869892817,0.08413526687316752,0.27512561614124625,0.9754715464371837,0.08512184073339643,0.17983168818870598,0.6757714047162297,0.871304753841452,0.5615702716630011,0.25937559652831843,0.48577220387191483,0.8150506974840752,0.9839762452028531,0.36910249399989753,0.07541544173168079,0.20546243780777632,0.8665014687052799,0.3853651167140526,0.6090680398052555,0.04232697255371143,0.8445769165261259,0.46598330646874336,0.431944237859565,0.141072879436207,0.06122635623492817,0.8033846921500105,0.014425365795922018,0.728263906794056,0.05206041324331015,0.38792208007748386,0.08753719664566613,0.8472736659659992,0.7362575787261121,0.3813379100932942,0.700962401778467,0.05622588421468283,0.11222515729140985,0.23726987074223221,0.9581991978294082,0.015762888317607388,0.05945761717789874,0.7389345556642268,0.18429170708419806,0.8129364065548244,0.6214696517305157,0.502373913888234,0.10075045670575322,0.5544517965133813,0.020391975343089258,0.8559997334454372,0.41137595453400383,0.30315061064523174,0.4241049658420253,0.4096940324399341,0.9121583299311626,0.5237691602644805,0.9058714177295277,0.7461315934387174,0.8529079190204509,0.22656893608242765,0.5721387403173908,0.31756848167001295,0.5954986290604611,0.10801417017696303,0.1789441366459073,0.5055173396741133,0.44947937178207814,0.19041052401111938,0.9397291390444258,0.0806338878554585,0.43756905860508893,0.23923429914954336,0.3634130810044088,0.732516192090815,0.12978014810378424,0.9273747320954244,0.17071506439034687,0.5373220449260765,0.03976519028475667,0.031241922826188984,0.830932300410165,0.5295537659508247,0.2202508425067314,0.9926010337058142,0.6328098790640136,0.5511138015342218,0.8852340543937747,0.8865926251804477,0.37928803557511703,0.050028406049745844,0.7588665412886535,0.8495877981572966,0.20089317328564343,0.028200844626999982,0.9426233230968728,0.2845629459734964,0.4303130130048465,0.6032452889503879,0.04445853890399076,0.024485013843436126,0.9476830457378567,0.023811513495489767,0.6181176362001989,0.22962658424751436,0.176879578179278,0.6479396079235489,0.23333645262155428};

  float find_mean(int x){
    return cluster_means[x];
  }
  
  
  struct NeuralNetwork {
        double weights[10]={
        -4.8713125e-03, -3.2774780e-02,  1.7964155e-03,  8.9991614e-03,
        1.2296044e-02, -1.3870989e-02, -2.2906180e-02,  7.7554714e-03,
        4.9314070e-03,  5.7054825e+00
    };
        double bias=-2.7557902;

        NeuralNetwork() {
            
        }

        double sigmoid(double x) {
            // Sigmoid activation function
            return 1 / (1 + exp(-x));
        }

        double predict(double input[10]) {
            // Calculate the weighted sum of inputs
            double weightedSum = 0;
            for (int i = 0; i < 10; ++i) {
                weightedSum += input[i] * weights[i];
            }
            // Add bias
            weightedSum += bias;

            // Apply sigmoid activation function
            return std::round(sigmoid(weightedSum));
        }
    };


    

};

RoboPredictor::RoboMemory roboMemory;
void update_window(int id,int grp){
  for(int i=0;i<10;i++){
    if (i==9){
  roboMemory.window[i]=roboMemory.find_mean(grp);

    }else{
        roboMemory.window[i]=roboMemory.window[i+1];

    }
  
    }

  }
bool RoboPredictor::predictTimeOfDayOnNextPlanet(
    std::uint64_t nextPlanetID, bool spaceshipComputerPrediction,
    int nextPlanetGroupTag) {
  // Robo can consult data structures in its memory while predicting.
  // Example: access Robo's memory with roboMemory_ptr-><your RoboMemory
  // content>

  // Robo can perform computations using any data in its memory during
  // prediction. It is important not to exceed the computation cost threshold
  // while making predictions and updating RoboMemory. The computation cost of
  // prediction and updating RoboMemory is calculated by the playground
  // automatically and printed together with accuracy at the end of the
  // evaluation (see main.cpp for more details).

  // Task2 specifics: now, Robo can use additional 10 bits from the 
  // space atlas for prediction.
  // nextPlanetGroupTag

  // Simple prediction policy: follow the spaceship computer's suggestions
  update_window(nextPlanetID,nextPlanetGroupTag);
  RoboPredictor::RoboMemory::NeuralNetwork neuralNetwork;
  double prediction = neuralNetwork.predict(roboMemory.window);
  if (prediction==1){
    return true;
  }
  else{
    return false;
  }
}

void RoboPredictor::observeAndRecordTimeofdayOnNextPlanet(
    std::uint64_t nextPlanetID, bool timeOfDayOnNextPlanet) {
  // Robo can consult/update data structures in its memory
  // Example: access Robo's memory with roboMemory_ptr-><your RoboMemory
  // content>

  // It is important not to exceed the computation cost threshold while making
  // predictions and updating RoboMemory. The computation cost of prediction and
  // updating RoboMemory is calculated by the playground automatically and
  // printed together with accuracy at the end of the evaluation (see main.cpp
  // for more details).

  // Simple prediction policy: do nothing
}

//------------------------------------------------------------------------------
// Please don't modify this file below
//
// Check if RoboMemory does not exceed 64KiB
static_assert(
    sizeof(RoboPredictor::RoboMemory) <= 65536,
    "Robo's memory exceeds 65536 bytes (64KiB) in your implementation. "
    "Prediction algorithms using so much "
    "memory are ineligible. Please reduce the size of your RoboMemory struct.");

// Declare constructor/destructor for RoboPredictor
RoboPredictor::RoboPredictor() { roboMemory_ptr = new RoboMemory; }
RoboPredictor::~RoboPredictor() { delete roboMemory_ptr; }